{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.2",
    "metadata": {
    "comments": "This template was developed for demonstration purposes.",
    "author": "Mohit Sharma"
  },
    "parameters": {
    //Webapp Name prefix
    "Webapp Name prefix": {
      "type": "string",
      "defaultValue": "ghost-azure",
      "metadata": {
          "description": "The name will concatinated with unique with an ID to make 2 unique names"
        }
    },
    //First Webapp location
    "1st WebApp Location": {
      "type": "string",
      "allowedValues": [
        "West Europe",
        "North Europe"
      ],
      "defaultValue": "North Europe"
    },
    //Second Webapp location
    "2nd WebApp Location": {
      "type": "string",
      "allowedValues": [
        "West Europe",
        "North Europe"
      ],
      "defaultValue": "West Europe"
    },
    "Sku": {
      "type": "string",
      "allowedValues": [
        "Basic",
        "Standard",
        "Premium"
      ],
      "defaultValue": "Standard",
      "metadata": {
          "description": "This is common for both Webapps"
        }
    },
    "Worker Size": {
      "type": "string",
      "allowedValues": [
        "1",
        "2",
        "3"
      ],
      "defaultValue": "1",
      "metadata": {
          "description": "This is common for both Webapps"
        }
    },
    //Ghost email configuration
    "Email Service": {
      "type": "string",
      "allowedValues": [
        "Not configured",
        "Mailgun",
        "Gmail",
        "SendGrid"
      ],
      "defaultValue": "Not configured",
      "metadata": {
          "description": "Email service for Ghost engine"
        }
    },
    "Email Username": {
      "type": "string",
      "defaultValue": ""
    },
    "Email Password": {
      "type": "string",
      "defaultValue": ""
    },
    "Email From Address": {
      "type": "string",
      "defaultValue": ""
    },
    // Code repository details
    "repoUrl": {
      "type": "string",
      "defaultValue": "https://github.com/dashanan13/Ghost-Azure"
    },
    "branch": {
      "type": "string",
      "defaultValue": "master"
    },
  
    //front door configuration
    "FrontDoorName": {
      "type": "string",
      "metadata": {
        "description": "The name of the frontdoor resource."
      },
      "defaultValue": "[concat(parameters('Webapp Name prefix'), '-', uniqueString(resourceGroup().id))]"
    }
  },
    
  "variables": {
    "skuMapping": "[if(equals(parameters('Sku'), 'Free'), 'F', if(equals(parameters('Sku'), 'Shared'), 'D', if(equals(parameters('Sku'), 'Basic'), 'B', if(equals(parameters('Sku'), 'Standard'), 'S', if(equals(parameters('sku'), 'Premium'), 'P', 'F')))))]",
    "sku": "[concat(variables('skuMapping'), parameters('Worker Size'))]",

    "uniquewebappname1" : "[concat(parameters('Webapp Name prefix'), '1-', uniqueString(resourceGroup().id))]",
    "uniquewebappname2" : "[concat(parameters('Webapp Name prefix'), '2-', uniqueString(resourceGroup().id))]",
    
    "webapp1address": "[concat(variables('uniquewebappname1'), '.azurewebsites.net')]",
    "webapp2address": "[concat(variables('uniquewebappname2'), '.azurewebsites.net')]",

    "appInsightsName1": "[concat(variables('uniquewebappname1'), '-insights')]",
    "appInsightsName2": "[concat(variables('uniquewebappname2'), '-insights')]",
    "hostingPlanName1": "[concat(variables('uniquewebappname1'), '-plan')]",
    "hostingPlanName2": "[concat(variables('uniquewebappname2'), '-plan')]",

    "frontdoorLocation": "global",

    "wafPolicyNameForFrontDoor": "wafPolicyForFrontDoor"
  },

  "resources": [
    //Creating resources for and Webaapp 1
    //Creating Webapp plan
    {
      "name": "[variables('hostingPlanName1')]",
      "type": "Microsoft.Web/serverfarms",
      "location": "[parameters('1st WebApp Location')]",
      "apiVersion": "2018-02-01",
      "sku": {
        "name": "[variables('sku')]"
      },
      "dependsOn": [],
      "properties": {
        "name": "[variables('hostingPlanName1')]",
        "numberOfWorkers": 1
      }
    },

    //Creating Application Insights
    {
      "name": "[variables('appInsightsName1')]",
      "type": "Microsoft.Insights/components",
      "location": "[parameters('1st WebApp Location')]",
      "apiVersion": "2014-04-01",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('uniquewebappname1'))]"
      ],
      "tags": {
        "displayName": "[variables('appInsightsName1')]"
      },
      "properties": {
        "ApplicationId": "[resourceId('Microsoft.Web/sites', variables('uniquewebappname1'))]",
        "Application_Type": "Node.JS"
      }
    },

    //Creating websites
    
    {
      "name": "[variables('uniquewebappname1')]",
      "type": "Microsoft.Web/sites",
      "location": "[parameters('1st WebApp Location')]",
      "apiVersion": "2018-11-01",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName1'))]"
      ],
      "tags": {
        "[concat('hidden-related:', resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName1')))]": "Resource",
        "displayName": "[variables('uniquewebappname1')]"
      },
      "properties": {
        "name": "[variables('uniquewebappname1')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName1'))]"
      },
      "resources": [
        {
          "apiVersion": "2018-11-01",
          "name": "web",
          "type": "config",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('uniquewebappname1'))]"
          ],
          "properties": {
            "use32BitWorkerProcess": false,
            "httpsOnly": true,
            "alwaysOn": true
          }
        },
        {
          "name": "appsettings",
          "type": "config",
          "apiVersion": "2018-11-01",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('uniquewebappname1'))]",
            "[resourceId('Microsoft.Insights/components', variables('appInsightsName1'))]"
          ],
          "properties": {
            "url": "[concat('https://', reference(resourceId('Microsoft.Web/sites', variables('uniquewebappname1'))).hostNames[0])]",
            "mail__transport": "SMTP",
            "mail__options__service": "[parameters('Email Service')]",
            "mail__options__auth__user": "[parameters('Email Username')]",
            "mail__options__auth__pass": "[parameters('Email Password')]",
            "mail__from": "[parameters('Email From Address')]",
            "WEBSITE_NODE_DEFAULT_VERSION": "~10",
            "NODE_ENV": "production",
            "APPINSIGHTS_INSTRUMENTATION_KEY": "[reference(concat('Microsoft.Insights/components/', variables('appInsightsName1'))).InstrumentationKey]"
          }
        },
        {
          "name": "web",
          "type": "sourcecontrols",
          "apiVersion": "2018-11-01",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('uniquewebappname1'))]",
            "[resourceId('Microsoft.Web/sites/config', variables('uniquewebappname1'), 'appsettings')]"
          ],
          "properties": {
            "repoUrl": "[parameters('repoUrl')]",
            "branch": "[parameters('branch')]",
            "isManualIntegration": true,
            "deploymentRollbackEnabled": true
          }
        }
      ]
    },
    
    //Creating resources for and Webaapp 2
    //Creating Webapp plan
    {
      "name": "[variables('hostingPlanName2')]",
      "type": "Microsoft.Web/serverfarms",
      "location": "[parameters('2nd WebApp Location')]",
      "apiVersion": "2018-02-01",
      "sku": {
        "name": "[variables('sku')]"
      },
      "dependsOn": [],
      "properties": {
        "name": "[variables('hostingPlanName2')]",
        "numberOfWorkers": 1
      }
    },

    //Creating Application Insights
    {
      "name": "[variables('appInsightsName2')]",
      "type": "Microsoft.Insights/components",
      "location": "[parameters('2nd WebApp Location')]",
      "apiVersion": "2014-04-01",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('uniquewebappname2'))]"
      ],
      "tags": {
        "displayName": "[variables('appInsightsName2')]"
      },
      "properties": {
        "ApplicationId": "[resourceId('Microsoft.Web/sites', variables('uniquewebappname2'))]",
        "Application_Type": "Node.JS"
      }
    },

    //Creating websites
    {
      "name": "[variables('uniquewebappname2')]",
      "type": "Microsoft.Web/sites",
      "location": "[parameters('2nd WebApp Location')]",
      "apiVersion": "2018-11-01",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName2'))]"
      ],
      "tags": {
        "[concat('hidden-related:', resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName2')))]": "Resource",
        "displayName": "[variables('uniquewebappname2')]"
      },
      "properties": {
        "name": "[variables('uniquewebappname2')]",
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName2'))]"
      },
      "resources": [
        {
          "apiVersion": "2018-11-01",
          "name": "web",
          "type": "config",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('uniquewebappname2'))]"
          ],
          "properties": {
            "use32BitWorkerProcess": false,
            "httpsOnly": true,
            "alwaysOn": true
          }
        },
        {
          "name": "appsettings",
          "type": "config",
          "apiVersion": "2018-11-01",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('uniquewebappname2'))]",
            "[resourceId('Microsoft.Insights/components', variables('appInsightsName2'))]"
          ],
          "properties": {
            "url": "[concat('https://', reference(resourceId('Microsoft.Web/sites', variables('uniquewebappname2'))).hostNames[0])]",
            "mail__transport": "SMTP",
            "mail__options__service": "[parameters('Email Service')]",
            "mail__options__auth__user": "[parameters('Email Username')]",
            "mail__options__auth__pass": "[parameters('Email Password')]",
            "mail__from": "[parameters('Email From Address')]",
            "WEBSITE_NODE_DEFAULT_VERSION": "~10",
            "NODE_ENV": "production",
            "APPINSIGHTS_INSTRUMENTATION_KEY": "[reference(concat('Microsoft.Insights/components/', variables('appInsightsName2'))).InstrumentationKey]"
          }
        },
        {
          "name": "web",
          "type": "sourcecontrols",
          "apiVersion": "2018-11-01",
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('uniquewebappname2'))]",
            "[resourceId('Microsoft.Web/sites/config', variables('uniquewebappname2'), 'appsettings')]"
          ],
          "properties": {
            "repoUrl": "[parameters('repoUrl')]",
            "branch": "[parameters('branch')]",
            "isManualIntegration": true,
            "deploymentRollbackEnabled": true
          }
        }
      ]
    },

    //Creating Frontdoor and additional resources
    //Creating WAF policy
    {
        "type": "Microsoft.Network/frontdoorwebapplicationfirewallpolicies",
        "apiVersion": "2020-11-01",
        "name": "[variables('wafPolicyNameForFrontDoor')]",
        "location": "[variables('frontdoorLocation')]",
        "sku": {
            "name": "Classic_AzureFrontDoor"
        },
        "properties": {
            "policySettings": {
                "enabledState": "Enabled",
                "mode": "Prevention",
                "customBlockResponseStatusCode": 403,
                "requestBodyCheck": "Disabled"
            },
            "customRules": {
                "rules": []
            },
            "managedRules": {
                "managedRuleSets": [
                    {
                        "ruleSetType": "DefaultRuleSet",
                        "ruleSetVersion": "1.0",
                        "ruleGroupOverrides": [],
                        "exclusions": []
                    }
                ]
            }
        }
    },
    //Creating Frontdoor
    {
            "type": "Microsoft.Network/frontdoors",
            "apiVersion": "2020-05-01",
            "name": "[parameters('FrontDoorName')]",
            "location": "[variables('frontdoorLocation')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', variables('uniquewebappname1'))]",
                "[resourceId('Microsoft.Network/frontdoorwebapplicationfirewallpolicies', variables('wafPolicyNameForFrontDoor'))]",
                "[resourceId('Microsoft.Web/sites', variables('uniquewebappname2'))]"
            ],
            "properties": {
                "routingRules": [
                    {
                        "id": "[concat(resourceId('Microsoft.Network/frontdoors', parameters('FrontDoorName')), concat('/RoutingRules/', parameters('FrontDoorName'), '-http2https'))]",
                        "name": "[concat(parameters('FrontDoorName'), '-http2https')]",
                        "properties": {
                            "routeConfiguration": {
                                "redirectType": "Found",
                                "redirectProtocol": "HttpsOnly",
                                "@odata.type": "#Microsoft.Azure.FrontDoor.Models.FrontdoorRedirectConfiguration"
                            },
                            "resourceState": "Enabled",
                            "frontendEndpoints": [
                                {
                                    "id": "[concat(resourceId('Microsoft.Network/frontdoors', parameters('FrontDoorName')), concat('/frontendEndpoints/', parameters('FrontDoorName'), '-azurefd-net'))]"
                                }
                            ],
                            "acceptedProtocols": [
                                "Http"
                            ],
                            "patternsToMatch": [
                                "/*"
                            ],
                            "enabledState": "Enabled"
                        }
                    },
                    {
                        "id": "[concat(resourceId('Microsoft.Network/frontdoors', parameters('FrontDoorName')), concat('/RoutingRules/', parameters('FrontDoorName'), '-forwarding'))]",
                        "name": "[concat(parameters('FrontDoorName'), '-forwarding')]",
                        "properties": {
                            "routeConfiguration": {
                                "forwardingProtocol": "HttpsOnly",
                                "backendPool": {
                                    "id": "[concat(resourceId('Microsoft.Network/frontdoors', parameters('FrontDoorName')), concat('/backendPools/', parameters('FrontDoorName'), '-webapps'))]"
                                },
                                "@odata.type": "#Microsoft.Azure.FrontDoor.Models.FrontdoorForwardingConfiguration"
                            },
                            "resourceState": "Enabled",
                            "frontendEndpoints": [
                                {
                                    "id": "[concat(resourceId('Microsoft.Network/frontdoors', parameters('FrontDoorName')), concat('/frontendEndpoints/', parameters('FrontDoorName'), '-azurefd-net'))]"
                                }
                            ],
                            "acceptedProtocols": [
                                "Https"
                            ],
                            "patternsToMatch": [
                                "/*"
                            ],
                            "enabledState": "Enabled"
                        }
                    }
                ],
                "resourceState": "Enabled",
                "loadBalancingSettings": [
                    {
                        "id": "[concat(resourceId('Microsoft.Network/frontdoors', parameters('FrontDoorName')), '/LoadBalancingSettings/loadBalancingSettings-1642866983480')]",
                        "name": "loadBalancingSettings-1642866983480",
                        "properties": {
                            "resourceState": "Enabled",
                            "sampleSize": 4,
                            "successfulSamplesRequired": 2,
                            "additionalLatencyMilliseconds": 0
                        }
                    }
                ],
                "healthProbeSettings": [
                    {
                        "id": "[concat(resourceId('Microsoft.Network/frontdoors', parameters('FrontDoorName')), '/HealthProbeSettings/healthProbeSettings-1642866983480')]",
                        "name": "healthProbeSettings-1642866983480",
                        "properties": {
                            "resourceState": "Enabled",
                            "path": "/",
                            "protocol": "Https",
                            "intervalInSeconds": 30,
                            "enabledState": "Enabled",
                            "healthProbeMethod": "Head"
                        }
                    }
                ],
                "backendPools": [
                    {
                        "id": "[concat(resourceId('Microsoft.Network/frontdoors', parameters('FrontDoorName')), concat('/BackendPools/', parameters('FrontDoorName'), '-webapps'))]",
                        "name": "[concat(parameters('FrontDoorName'), '-webapps')]",
                        "properties": {
                            "backends": [
                                {
                                    "address": "[variables('webapp1address')]",
                                    "httpPort": 80,
                                    "httpsPort": 443,
                                    "priority": 1,
                                    "weight": 50,
                                    "backendHostHeader": "[variables('webapp1address')]",
                                    "enabledState": "Enabled"
                                },
                                {
                                    "address": "[variables('webapp2address')]",
                                    "httpPort": 80,
                                    "httpsPort": 443,
                                    "priority": 1,
                                    "weight": 50,
                                    "backendHostHeader": "[variables('webapp2address')]",
                                    "enabledState": "Enabled"
                                }
                            ],
                            "resourceState": "Enabled",
                            "loadBalancingSettings": {
                                "id": "[concat(resourceId('Microsoft.Network/frontdoors', parameters('FrontDoorName')), '/loadBalancingSettings/loadBalancingSettings-1642866983480')]"
                            },
                            "healthProbeSettings": {
                                "id": "[concat(resourceId('Microsoft.Network/frontdoors', parameters('FrontDoorName')), '/healthProbeSettings/healthProbeSettings-1642866983480')]"
                            }
                        }
                    }
                ],
                "frontendEndpoints": [
                    {
                        "id": "[concat(resourceId('Microsoft.Network/frontdoors', parameters('FrontDoorName')), concat('/FrontendEndpoints/', parameters('FrontDoorName'), '-azurefd-net'))]",
                        "name": "[concat(parameters('FrontDoorName'), '-azurefd-net')]",
                        "properties": {
                            "resourceState": "Enabled",
                            "hostName": "[concat(parameters('FrontDoorName'), '.azurefd.net')]",
                            "sessionAffinityEnabledState": "Enabled",
                            "sessionAffinityTtlSeconds": 0,
                            "webApplicationFirewallPolicyLink": {
                                "id": "[resourceId('Microsoft.Network/frontdoorwebapplicationfirewallpolicies', variables('wafPolicyNameForFrontDoor'))]"
                            }
                        }
                    }
                ],
                "backendPoolsSettings": {
                    "enforceCertificateNameCheck": "Enabled",
                    "sendRecvTimeoutSeconds": 30
                },
                "enabledState": "Enabled",
                "friendlyName": "[parameters('FrontDoorName')]"
            }
        }
  ]
}
